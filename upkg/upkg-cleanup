#!/bin/bash

build_dir="$HOME/.cache/upkg/build"
 keep_dir="$HOME/.local/upkg/keep"
   libdir=${BASH_SOURCE%/*}

 clean_orphans=1
 clean_sources=1
clean_packages=1
  clean_builds=1

while [[ $1 == -* ]]
do
	case $1 in
		-o)  clean_orphans=0 ;;
		-s)  clean_sources=0 ;;
		-p) clean_packages=0 ;;
		-b)   clean_builds=0 ;;
	esac
	shift
done

confirm_keep_list() {
	readarray -t installed < <( pkginfo -i | awk '{print $1}' )

	tmp=/tmp/upkg-cleanup

	echo "Checking dependencies for ${#installed[@]} packages..."

	"$libdir/upkg-deptree" -s "${installed[@]}" 2>/dev/null \
		| grep -v '(unknown)'                           \
		| grep -v ' install -> '                        \
		> $tmp

	readarray -t deps < <( grep '^   ' $tmp | awk '{print $1}' | sort -u )

	readarray -t no_dependent < <(
		comm -23 <( grep '^  [^ ]' $tmp | grep -v '/core)' | awk '{print $1}' | sort) \
			 <( printf '%s\n' "${deps[@]}" )
	)

	rm=()
	for name in "${no_dependent[@]}"
	do
		[[ -f "$keep_dir/$name" ]] && continue
	
		"$libdir/upkg-info" "$name"
		read -p ">>> Uninstall '$name'? [y/N] "
		if [[ $REPLY == y* ]]; then
			"$libdir/upkg-rm" "$name" \
				&& rm+=( "$name" )
		else
			touch "$keep_dir/$name"
		fi
	done

	rm $tmp
	(( ${#rm[@]} > 0 ))
}

if (( clean_orphans ))
then
	[[ -d $keep_dir ]] || mkdir -p "$keep_dir" || exit 1
	while confirm_keep_list; do
		true
	done

	readarray -t names < <( set -x; revdep -i libreoffice )
	wait $! || exit 1

	for name in "${names[@]}"
	do
		printf 'Rebuild/reinstall "%s" because of revdep\n' "$name"

		"$libdir/upkg-install" -r "$name"
	done
fi

shopt -s nullglob
builds=( "$build_dir"/*/ )

if (( clean_builds ))
then
	echo "Removing old build dirs from uninstalled ports"

	readarray -t installed < <( pkginfo -i | awk '{print $1}' )
	comm -23 \
		<( printf              '%s\n'  "${builds[@]}"    | sort ) \
		<( printf "$build_dir"'/%s/\n' "${installed[@]}" | sort ) \
	| xargs -I{} sh -xc "rm -rf '{}'"

	builds=( "$build_dir"/*/ )
fi

(( clean_sources + clean_packages )) \
	|| exit 0

echo "Removing old sources/packages"
for dir in "${builds[@]}"
do
	dir=${dir%/}
	port=${dir##*/}

	readarray -t sources < <( "$libdir/upkg-dl-list" "$dir/Pkgfile" 2>/dev/null )
	readarray -t pkgs < <(
		find "$dir/" -maxdepth 1 -name "$port#*.pkg.tar*" -printf '%T@ %P\n' \
		| sort -nr \
		| awk '{print $2}' \
		| head -2
	) 2>/dev/null
	re_pkg="^$port#.*.pkg.tar.*"

	shopt -s dotglob
	for f in "$dir"/*
	do
		name=${f##*/}
		if [[ -L $f ]]
		then    # keep symlinks
			continue
		elif [[ $name =~ $re_pkg ]]
		then    # keep the last 2 packages
			re_f=" $name "
			(( clean_packages ))                       \
				&& [[ ! " ${pkgs[*]} " =~ $re_f ]] \
				&& {
					echo "Pkg '$name' not in (${pkgs[*]})"
					sh -xc "rm -f '$f'"
				}
		elif (( clean_sources ))
		then    # keep the last sources
			re_f=" $name "
			[[ ! " ${sources[*]##*/} " =~ $re_f ]] \
				&& {
					echo "Source '$name' not in (${sources[*]##*/})"
					sh -xc "rm -rf '$f'"
				}
		fi
	done
done
