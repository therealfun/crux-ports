# Description:  Latest stable Linux kernel
# URL:          https://www.kernel.org/
# Maintainer:   fun, just.the.real.fun at gmail dot com
# Depends on:   plzip pxz
# Nice to have: gnupg umkinitramfs

name=linux-stable
version=4.16.7
release=1
source=(
	https://www.kernel.org/pub/linux/kernel/v4.x/linux-${version%.*}.tar.xz
	https://www.kernel.org/pub/linux/kernel/v4.x/linux-${version%.*}.tar.sign
	https://www.kernel.org/pub/linux/kernel/v4.x/patch-$version.xz
	https://www.kernel.org/pub/linux/kernel/v4.x/patch-$version.sign
	post-install .watch
)

build() {
	linux=linux-${version%.*}
	extraVer=-auto-$release
	prevK=$(uname -r)
	prevSRC=

	# rebuild the same version, but probably with a different .config
	[[ $prevK == "$version$extraVer" ]] \
		&& extraVer=-auto-$(( release + 1 ))

	set -o pipefail

	# https://www.kernel.org/category/signatures.html
	# wget https://cdn.kernel.org/pub/linux/kernel/v4.x/sha256sums.asc -q -O- |grep patch-4.x.y
	for sign in $SRC/*.sign
	do
		signed=${sign##*/}
		( punxz -cd $PKGMK_SOURCE_DIR/${signed%.sign}.xz | gpg --verify $sign ) || true
	done

	cd $linux

	if [[ -e $SRC/patch-$version.xz ]]; then
		punxz -cd $SRC/patch-$version.xz \
		| patch --silent --strip=1 --remove-empty-files
	fi

	make mrproper

	if [[ -e /boot/defconfig ]]; then
		cp /boot/defconfig arch/x86/configs/local_defconfig
		make local_defconfig
	else
		cp /boot/config .config 2>/dev/null       \
			|| zcat /proc/config.gz > .config \
			|| { echo "ERROR: missing config file" >&2; exit 1; }
		make olddefconfig
	fi

	( diff -u <(zcat /proc/config.gz) .config | egrep '^[-+]CONFIG_' >&2 ) || true

	sed     -e '1i KCFLAGS=-march=native -mtune=native' \
		-e "s/^\(EXTRAVERSION =\).*/\\1 $extraVer/" \
		--in-place Makefile

	MAKEFLAGS="-j${JOBS:-$(nproc)} $MAKEFLAGS" \
		make all

	local nextK=$(make kernelrelease)

	install --directory --mode=0755 $PKG/{boot,lib/modules,usr/src}

	[[ -f /boot/vmlinuz ]] \
		&& install --mode=0644 /boot/vmlinuz    $PKG/boot/vmlinuz.prev
	[[ -f /boot/System.map ]] \
		&& install --mode=0644 /boot/System.map $PKG/boot/System.map.prev

	install --mode=0644 arch/x86/boot/bzImage       $PKG/boot/vmlinuz.next
	install --mode=0644 System.map                  $PKG/boot/System.map.next

	linux_modules_archive /lib/modules "$prevK" prev.tar.lz

	make modules_install INSTALL_MOD_PATH="$PKG" \
		INSTALL_MOD_STRIP="--strip-debug --remove-section=.note.gnu.build-id"
	linux_modules_archive $PKG/lib/modules "$nextK" next.tar.lz
	rm -rf                $PKG/lib/modules/$nextK

	if [[ -L "/lib/modules/$prevK/source" ]]; then
		prevSRC=$(readlink -f "/lib/modules/$prevK/source")
		[[ ! -d $prevSRC ]] && prevSRC=
	fi

	if [[ $prevSRC ]]; then
		linux_src_archive "${prevSRC%/*}" "${prevSRC##*/}" "$prevK" prev.tar.lz
		make mrproper
		linux_src_archive ..              "$linux"         "$nextK" next.tar.lz
	else
		linux_empty_src_archive prev.tar.lz
		linux_empty_src_archive next.tar.lz
	fi

	printf '%s\n' "$prevK" >$PKG/boot/prev
	printf '%s\n' "$nextK" >$PKG/boot/next
}

linux_modules_archive() {
	local src=$1
	local   K=$2
	local arc=$3

	bsdtar  --cd "$src"                \
		--create                   \
		--uid 0 --gid 0            \
		--file -                   \
		--exclude "$K/source"      \
		--exclude "$K/build"       \
		--no-fflags                \
		"$K"                       \
	| plzip -c > $PKG/lib/modules/$arc
}

linux_src_archive() {
	local  dir=$1
	local name=$2
	local    K=$3
	local  arc=$4

	bsdtar  --cd "$dir"            \
		--create               \
		--uid 0 --gid 0        \
		--file -               \
		-s "/^$name/linux-$K/" \
		--no-fflags            \
		"$name"                \
	| plzip -c > $PKG/usr/src/$arc
}

linux_empty_src_archive() {
	bsdtar  --create                 \
		--file "$PKG/usr/src/$1" \
		--lzip                   \
		--files-from /dev/null
}
