#!/bin/sh

set -x

check_grub_cfg() {
	local cfg=/boot/grub/grub.cfg

	test -e $cfg || return 1

	if     pkginfo -i | grep '^grub2 ' >/dev/null; then
		grub-script-check $cfg \
			|| return 1
	elif ! pkginfo -i | grep '^grub '  >/dev/null; then
		return 1
	fi

	grep -iP '\s*linux .*/boot/vmlinuz(\s|$)'      $cfg \
		|| { echo "WARNING: missing vmlinuz     from $cfg"; return 1; }
	grep -iP '\s*linux .*/boot/vmlinuz\.old(\s|$)' $cfg \
		|| { echo "WARNING: missing vmlinuz.old from $cfg"; return 1; }

	return 0
}

check_syslinux_cfg() {
	local cfg1=/boot/extlinux.cfg
	local cfg2=/boot/syslinux.cfg
	local cfg

	  if [ -e $cfg1 ]; then cfg=$cfg1
	elif [ -e $cfg2 ]; then cfg=$cfg2
	else
		return 1
	fi

	grep -iP '\s*linux\s+vmlinuz(\s|$)'      $cfg \
		|| { echo "WARNING: missing vmlinuz     from $cfg"; return 1; }
	grep -iP '\s*linux\s+vmlinuz\.old(\s|$)' $cfg \
		|| { echo "WARNING: missing vmlinuz.old from $cfg"; return 1; }

	return 0
}

check_lilo_cfg() {
	local cfg=/etc/lilo.conf

	test -e $cfg || return 1

	grep -iP '\s*image\s*=\s*/boot/vmlinuz(\s|$)'      $cfg \
		|| { echo "WARNING: missing vmlinuz     from $cfg"; return 1; }
	grep -iP '\s*image\s*=\s*/boot/vmlinuz\.old(\s|$)' $cfg \
		|| { echo "WARNING: missing vmlinuz.old from $cfg"; return 1; }

	return 0
}

  if    check_grub_cfg;     then install_cmd=/bin/true
elif    check_syslinux_cfg; then install_cmd=/bin/true
elif    check_lilo_cfg;     then install_cmd=/sbin/lilo
else
	echo "ERROR: no supported configuratioin found"
	exit 1
fi

prevName=prev
nextName=next
prevArchive=prev.tar.lz
nextArchive=next.tar.lz
prevRelease=$(cat /boot/$prevName)
nextRelease=$(cat /boot/$nextName)

test -n "$prevRelease" || exit 1
test -n "$nextRelease" || exit 1

prevModules=/lib/modules/$prevRelease
nextModules=/lib/modules/$nextRelease
nextSources=/usr/src/linux-$nextRelease

# Run install_cmd and exit (if this is not the first run)
   test -d $prevModules              \
&& test -d $nextModules              \
&& test -f /boot/vmlinuz.old         \
&& test -f /boot/vmlinuz             \
&& test ! -e /boot/vmlinuz.$prevName \
&& test ! -e /boot/vmlinuz.$nextName \
&& exec $install_cmd

remove_tmp_dirs() {
	ec=$?
	rm --force --recursive /lib/modules/tmp /usr/src/tmp 2>/dev/null
	exit $ec
}
trap remove_tmp_dirs EXIT

# Prepare the temporary directories
for d in /lib/modules/tmp /usr/src/tmp
do
	if test -d $d
	then
		rm --recursive --force $d || exit 1
	fi
	mkdir $d || exit 1
done

# Unpack to temporary directories.
# In case there is not enough disk space, exiting now is better.
for a in /lib/modules/$prevArchive /lib/modules/$nextArchive /usr/src/$nextArchive
do
	bsdtar --cd $(dirname $a)/tmp --extract --file $a || exit 1
done

cleanup=/lib/modules/autogenerated-cleanup.sh

# We only remove ours modules/sources (which include the -auto- string)
echo "#!/bin/sh
	for a in $prevModules $nextModules $nextSources
	do
		case \$a in
			*-auto-*)
				test -d \$a                || continue
				rm --recursive --force \$a || exit 1
				;;
			*)
				;;
		esac
	done
	exit 0
" >$cleanup.tmp || exit 1

test -f $cleanup && {
	sh         $cleanup || exit 1
	rm --force $cleanup
}

warn() {
	ec=$?
	test $ec = 0 || {
		echo "ERROR: Your system might not boot"
		echo "!!! Check /lib/modules/ and /boot/"
	}
	remove_tmp_dirs
	exit $ec
}

trap warn EXIT

mv $cleanup.tmp $cleanup || exit 1

if [ -d /usr/src/tmp/linux-$nextRelease ]; then
	# The source archive was not empty

	mv /usr/src/tmp/linux-$nextRelease $nextSources || exit 1

	ln -s $nextSources $nextModules/source
	ln -s $nextSources $nextModules/build
fi

rmdir /lib/modules/tmp /usr/src/tmp

if [ -e $prevModules ]; then
	# If the previous modules still exist after the cleanup,
	# it means is not ours, and we keep them.
	rm --recursive --force /lib/modules/tmp/$prevRelease
else
	mv /lib/modules/tmp/$prevRelease $prevModules || exit 1
fi
mv /lib/modules/tmp/$nextRelease   $nextModules || exit 1

mv /boot/System.map.$prevName /boot/System.old  || exit 1
mv /boot/System.map.$nextName /boot/System.map  || exit 1
mv /boot/vmlinuz.$prevName    /boot/vmlinuz.old || exit 1
mv /boot/vmlinuz.$nextName    /boot/vmlinuz     || exit 1

sync

$install_cmd
